var FilterStateManagerModule;
(function (FilterStateManagerModule) {
    var AffectedNodesSet = TestTree.Common.AffectedNodesSet;
    var TreeHelpers = Comarch.Utils.TreeUtils.TreeHelpers;
    var ForwardTreeTraversalIteratorFactory = Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory;
    let FilterType;
    (function (FilterType) {
        FilterType[FilterType["Included"] = "Included"] = "Included";
        FilterType[FilterType["Excluded"] = "Excluded"] = "Excluded";
    })(FilterType = FilterStateManagerModule.FilterType || (FilterStateManagerModule.FilterType = {}));
    let SelectionMode;
    (function (SelectionMode) {
        SelectionMode[SelectionMode["Selected"] = "Selected"] = "Selected";
        SelectionMode[SelectionMode["Deselected"] = "Deselected"] = "Deselected";
        SelectionMode[SelectionMode["Undetermined"] = "Undetermined"] = "Undetermined";
    })(SelectionMode = FilterStateManagerModule.SelectionMode || (FilterStateManagerModule.SelectionMode = {}));
    class ExtendedFilterItem {
        constructor(uniqueName, parentUniqueName, childrenTotalCount, type, children) {
            this.Children = {};
            this.UniqueName = uniqueName,
                this.ParentUniqueName = parentUniqueName;
            this.Type = type || FilterType.Included;
            this.Children = children || {};
            this.ChildrenTotalCount = childrenTotalCount || 0;
        }
        get Parent() { return this.AllItemsLookup[this.ParentUniqueName]; }
        get CurrentChildrenCount() { return Object.keys(this.Children).length; }
        get IsLeaf() { return this.CurrentChildrenCount === 0; }
        AddChild(child, isSelected) {
            this.InheritType(child);
            child.AllItemsLookup = this.AllItemsLookup;
            child.RegisterInParent(isSelected);
        }
        InheritType(child) {
            child.Type = this.Type;
        }
        RegisterInParent(isSelected) {
            switch (this.Parent.Type) {
                case FilterType.Included:
                    if (isSelected) {
                        this.Parent.Children[this.UniqueName] = this;
                        this.AllItemsLookup[this.UniqueName] = this;
                    }
                    else {
                        delete this.Parent.Children[this.UniqueName];
                        delete this.AllItemsLookup[this.UniqueName];
                    }
                    break;
                case FilterType.Excluded:
                    if (isSelected) {
                        delete this.Parent.Children[this.UniqueName];
                        delete this.AllItemsLookup[this.UniqueName];
                    }
                    else {
                        this.Parent.Children[this.UniqueName] = this;
                        this.AllItemsLookup[this.UniqueName] = this;
                    }
                    break;
            }
        }
        HandleSelectionChange(isSelected, isTargetNode, affectedNodesSet) {
            if (isTargetNode) {
                this.Type = isSelected ? FilterType.Excluded : FilterType.Included;
            }
            affectedNodesSet.Add(this.UniqueName);
            this.RemoveAllChildren();
            if (!this.Parent)
                return;
            this.RegisterInParent(isSelected);
            this.TryRefreshUp(affectedNodesSet);
        }
        TryRefreshUp(affectedNodesSet) {
            if (!this.Parent)
                return;
            var mode = this.Parent.GetSelectionMode();
            if (mode === SelectionMode.Undetermined) {
                this.AffectAllParents(affectedNodesSet);
            }
            else {
                this.Parent.HandleSelectionChange(mode === SelectionMode.Selected, true, affectedNodesSet);
            }
        }
        GetSelectionMode() {
            const allChildrenAreLeafs = this.CheckAllChidrenAreLeafs();
            if (this.ChildrenTotalCount === this.CurrentChildrenCount && allChildrenAreLeafs) {
                return this.Type === FilterType.Included ? SelectionMode.Selected : SelectionMode.Deselected;
            }
            else if (this.CurrentChildrenCount === 0) {
                return this.Type === FilterType.Excluded ? SelectionMode.Selected : SelectionMode.Deselected;
            }
            return SelectionMode.Undetermined;
        }
        AffectAllParents(affectedNodesSet) {
            affectedNodesSet.Add(this.UniqueName);
            if (!this.Parent)
                return;
            this.Parent.AffectAllParents(affectedNodesSet);
        }
        CheckAllChidrenAreLeafs() {
            let result = true;
            const filterItemLookup = this.Children;
            for (let childKey in filterItemLookup) {
                if (filterItemLookup.hasOwnProperty(childKey)) {
                    const child = filterItemLookup[childKey];
                    if (!child.IsLeaf) {
                        result = false;
                        break;
                    }
                }
            }
            return result;
        }
        RemoveAllChildren() {
            const keys = Object.keys(this.Children);
            for (let i = keys.length - 1; i >= 0; i--) {
                const child = this.Children[keys[i]];
                child.RemoveAllChildren();
                delete this.AllItemsLookup[child.UniqueName];
                delete this.Children[child.UniqueName];
            }
        }
        GetSelectionStatus(childUniqueName) {
            const child = this.Children[childUniqueName];
            if (child && child.CurrentChildrenCount > 0) {
                return SelectionMode.Undetermined;
            }
            switch (this.Type) {
                case FilterType.Included:
                    return child ? SelectionMode.Selected : SelectionMode.Deselected;
                case FilterType.Excluded:
                    return child ? SelectionMode.Deselected : SelectionMode.Selected;
                default:
                    return SelectionMode.Undetermined;
            }
        }
    }
    FilterStateManagerModule.ExtendedFilterItem = ExtendedFilterItem;
    class FilterStateManager {
        constructor(childrenTotalCount) {
            this._root = this.GetEmptyRootItem();
            this._root.ChildrenTotalCount = childrenTotalCount;
            this._root.AllItemsLookup = {};
            this._root.AllItemsLookup[this._root.UniqueName] = this._root;
        }
        GetEmptyRootItem() {
            return new ExtendedFilterItem("#", null, FilterType.Excluded);
        }
        AddNodes(sortedParents, targetNode, isSelected) {
            var affectedNodes = new AffectedNodesSet();
            sortedParents.forEach(node => this.AddNode(node, isSelected, false, affectedNodes));
            this.AddNode(targetNode, isSelected, true, affectedNodes);
            return affectedNodes;
        }
        AddNode(node, isSelected, isTargetNode, affectedNodesSet) {
            const existingNode = this._root.AllItemsLookup[node.UniqueName];
            const existingParentNode = this._root.AllItemsLookup[node.ParentUniqueName];
            if (!existingNode) {
                if (existingParentNode) {
                    existingParentNode.AddChild(node, isSelected);
                    if (isTargetNode) {
                        node.HandleSelectionChange(isSelected, isTargetNode, affectedNodesSet);
                    }
                }
                else {
                    throw new Error("Can not add node to not existing parent.");
                }
                return false;
            }
            else {
                if (isTargetNode) {
                    existingNode.HandleSelectionChange(isSelected, true, affectedNodesSet);
                }
            }
            return true;
        }
        ClearState(isSelect) {
            this._root.RemoveAllChildren();
            this._root.Type = isSelect ? FilterType.Excluded : FilterType.Included;
            return AffectedNodesSet.Empty.Add("#");
        }
        GetState() { return this._root; }
        Serialize(includeChildrenTotalCount = true) {
            const result = TreeHelpers.Convert(this._root, x => Object.keys(x.Children).map(key => x.Children[key]), x => x.Children, (current) => {
                const result = { Type: current.Type, UniqueName: current.UniqueName, Children: [] };
                if (includeChildrenTotalCount) {
                    result.ChildrenTotalCount = current.ChildrenTotalCount;
                }
                return result;
            });
            return result;
        }
        Deserialize(serializedRoot) {
            var lookup = {};
            this._root = TreeHelpers.Convert(serializedRoot, x => x.Children, x => null, (current, parent) => {
                var parentUniqueName = null;
                if (parent) {
                    parentUniqueName = parent.UniqueName;
                }
                const result = new ExtendedFilterItem(current.UniqueName, parentUniqueName, current.ChildrenTotalCount, current.Type);
                result.AllItemsLookup = lookup;
                lookup[result.UniqueName] = result;
                return result;
            }, (parent, child) => parent.Children[child.UniqueName] = child);
        }
        GetSelectionStatus(parentIds, id) {
            let status = SelectionMode.Undetermined;
            let currentParent;
            let currentChildUniqueName = id;
            for (let index = 0; index < parentIds.length; index++) {
                const currentParentUniqueName = parentIds[index];
                currentParent = this._root.AllItemsLookup[currentParentUniqueName];
                if (currentParent) {
                    status = currentParent.GetSelectionStatus(currentChildUniqueName);
                    break;
                }
                else {
                    currentChildUniqueName = currentParentUniqueName;
                }
            }
            return status;
        }
        GetAllNodeSelectionStatus() {
            return this._root.GetSelectionMode();
        }
        GetLeafs() {
            var result = [];
            TreeHelpers.TraversePreorder(this._root, x => Object.keys(x.Children).map(key => x.Children[key]), (current) => {
                if (current.IsLeaf) {
                    result.push(current.UniqueName);
                }
                return true;
            }, new ForwardTreeTraversalIteratorFactory());
            return result;
        }
        PerformCleanup(cleanedLeafs) {
            var affectedNodesSet = AffectedNodesSet.Empty;
            var cleanedLeafsLookup = {};
            cleanedLeafs.forEach(x => cleanedLeafsLookup[x] = true);
            var currentLeafs = [];
            Object.keys(this._root.AllItemsLookup).forEach(key => {
                let filterItem = this._root.AllItemsLookup[key];
                if (filterItem.IsLeaf) {
                    currentLeafs.push(filterItem);
                }
            });
            currentLeafs.forEach(currentLeaf => {
                if (!cleanedLeafsLookup[currentLeaf.UniqueName]) {
                    currentLeaf.HandleSelectionChange(false, true, affectedNodesSet);
                }
            });
            this.Print();
        }
        Print() {
            console.log(this._root.AllItemsLookup);
            var text = "";
            var writeLevelIndent = (text, level) => {
                for (let i = 0; i < level; i++) {
                    text = text + "| ";
                }
                return text;
            };
            TreeHelpers.TraversePreorder(this._root, x => Object.keys(x.Children).map(key => x.Children[key]), (current, parent, level) => {
                text = writeLevelIndent(text, level);
                text += "|";
                text += "-";
                text += this.PrintFilterItem(current);
                text += "\n";
                return true;
            }, new ForwardTreeTraversalIteratorFactory());
            console.log(text);
        }
        PrintFilterItem(filterItem) {
            let type = "";
            switch (filterItem.Type) {
                case FilterType.Included:
                    type = type + "(I)";
                    break;
                case FilterType.Excluded:
                    type = type + "(E)";
                    break;
                default:
            }
            return filterItem.UniqueName + type;
        }
    }
    FilterStateManagerModule.FilterStateManager = FilterStateManager;
})(FilterStateManagerModule || (FilterStateManagerModule = {}));
//# sourceMappingURL=data:application/json;base64,