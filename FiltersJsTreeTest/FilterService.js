var TestTree;
(function (TestTree) {
    var FilterServiceModule;
    (function (FilterServiceModule) {
        class TestRequest {
            constructor(Value) {
                this.Value = Value;
            }
        }
        FilterServiceModule.TestRequest = TestRequest;
        class TestResponse {
        }
        FilterServiceModule.TestResponse = TestResponse;
        class FilterService {
            constructor(_connectionString) {
                this._connectionString = _connectionString;
            }
            FillCommonData(request) {
                request.ConnectionString = this._connectionString;
                return request;
            }
            async GetMetadata(request) {
                return this.PostData({ url: "api/FilterControl/GetMetadata", data: this.FillCommonData(request) });
            }
            async GetMembers(request) {
                return this.PostData({ url: "api/FilterControl/GetMembers", data: this.FillCommonData(request) });
            }
            async GetLeafMembers(request) {
                return this.PostData({ url: "api/FilterControl/GetLeafMembers", data: this.FillCommonData(request) });
            }
            async GetChildren(request) {
                return this.PostData({ url: "api/FilterControl/GetChildren", data: this.FillCommonData(request) });
            }
            HasMoreMembers(count, loadedLastLevelNodes) {
                return loadedLastLevelNodes.length === count + 1;
            }
            async Echo() {
                var response = await this.PostData({ url: "api/FilterControl/Echo", data: new TestRequest("Dawid") });
                console.log("ECHO", response);
                return response;
            }
            PostData(args) {
                var ajaxSettings = {
                    url: "/" + args.url,
                    type: "POST",
                    contentType: "application/json;charset=utf-8",
                    data: JSON.stringify(args.data),
                    dataType: "json",
                };
                return new Promise((resolve, rejects) => {
                    $.ajax(ajaxSettings).done((result) => resolve(result)).fail(error => rejects(error));
                });
            }
        }
        FilterServiceModule.FilterService = FilterService;
    })(FilterServiceModule = TestTree.FilterServiceModule || (TestTree.FilterServiceModule = {}));
})(TestTree || (TestTree = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsdGVyU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZpbHRlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBVSxRQUFRLENBZ0ZqQjtBQWhGRCxXQUFVLFFBQVE7SUFBQyxJQUFBLG1CQUFtQixDQWdGckM7SUFoRmtCLFdBQUEsbUJBQW1CO1FBV2xDO1lBQ0ksWUFBbUIsS0FBYTtnQkFBYixVQUFLLEdBQUwsS0FBSyxDQUFRO1lBRWhDLENBQUM7U0FFSjtRQUxZLCtCQUFXLGNBS3ZCLENBQUE7UUFDRDtTQUF5QztRQUE1QixnQ0FBWSxlQUFnQixDQUFBO1FBRXpDO1lBRUksWUFBb0IsaUJBQXdCO2dCQUF4QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQU87WUFFNUMsQ0FBQztZQUVPLGNBQWMsQ0FBQyxPQUEwQjtnQkFDN0MsT0FBTyxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztnQkFDbEQsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuQixDQUFDO1lBRU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUF3QjtnQkFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQW1CLEVBQUUsR0FBRyxFQUFFLCtCQUErQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN6SCxDQUFDO1lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUF1QjtnQkFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQWtCLEVBQUUsR0FBRyxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2SCxDQUFDO1lBRU0sS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUEyQjtnQkFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQWtCLEVBQUUsR0FBRyxFQUFFLGtDQUFrQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzSCxDQUFDO1lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUF3QjtnQkFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQWtCLEVBQUUsR0FBRyxFQUFFLCtCQUErQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN4SCxDQUFDO1lBR08sY0FBYyxDQUFDLEtBQWEsRUFBRSxvQkFBa0M7Z0JBQ3BFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEtBQUssS0FBSyxHQUFDLENBQUMsQ0FBQztZQUNuRCxDQUFDO1lBRU8sS0FBSyxDQUFDLElBQUk7Z0JBQ2QsSUFBSSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLHdCQUF3QixFQUFFLElBQUksRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3RHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUMsUUFBUSxDQUFDO1lBQ3BCLENBQUM7WUFFTyxRQUFRLENBQUksSUFBYztnQkFFOUIsSUFBSSxZQUFZLEdBQXVCO29CQUNuQyxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHO29CQUNuQixJQUFJLEVBQUUsTUFBTTtvQkFDWixXQUFXLEVBQUUsZ0NBQWdDO29CQUM3QyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUMvQixRQUFRLEVBQUUsTUFBTTtpQkFFbkIsQ0FBQztnQkFDRixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUU7b0JBQ3ZDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDekYsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1NBRUo7UUFyRFksaUNBQWEsZ0JBcUR6QixDQUFBO0lBUUwsQ0FBQyxFQWhGa0IsbUJBQW1CLEdBQW5CLDRCQUFtQixLQUFuQiw0QkFBbUIsUUFnRnJDO0FBQUQsQ0FBQyxFQWhGUyxRQUFRLEtBQVIsUUFBUSxRQWdGakIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgVGVzdFRyZWUuRmlsdGVyU2VydmljZU1vZHVsZSB7XHJcbiAgICBpbXBvcnQgSU1lbWJlck5vZGUgPSBDb21tb24uSU1lbWJlck5vZGU7XHJcbiAgICBpbXBvcnQgTWV0YWRhdGFSZXF1ZXN0ID0gQ29tbW9uLk1ldGFkYXRhUmVxdWVzdDtcclxuICAgIGltcG9ydCBNZXRhZGF0YVJlc3BvbnNlID0gQ29tbW9uLk1ldGFkYXRhUmVzcG9uc2U7XHJcbiAgICBpbXBvcnQgTWVtYmVyc1JlcXVlc3QgPSBDb21tb24uTWVtYmVyc1JlcXVlc3Q7XHJcbiAgICBpbXBvcnQgTWVtYmVyc1Jlc3BvbnNlID0gQ29tbW9uLk1lbWJlcnNSZXNwb25zZTtcclxuICAgIGltcG9ydCBMZWFmTWVtYmVyc1JlcXVlc3QgPSBDb21tb24uTGVhZk1lbWJlcnNSZXF1ZXN0O1xyXG4gICAgaW1wb3J0IENoaWxkcmVuUmVxdWVzdCA9IENvbW1vbi5DaGlsZHJlblJlcXVlc3Q7XHJcbiAgICBpbXBvcnQgSUZpbHRlckNvbnRyb2xTZXJ2aWNlID0gQ29tbW9uLklGaWx0ZXJDb250cm9sU2VydmljZTtcclxuICAgIGltcG9ydCBGaWx0ZXJSZXF1ZXN0QmFzZSA9IENvbW1vbi5GaWx0ZXJSZXF1ZXN0QmFzZTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGVzdFJlcXVlc3Qge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBWYWx1ZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIFRlc3RSZXNwb25zZSB7VmFsdWUgOnN0cmluZ31cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgRmlsdGVyU2VydmljZSBpbXBsZW1lbnRzIElGaWx0ZXJDb250cm9sU2VydmljZSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSBfY29ubmVjdGlvblN0cmluZzpzdHJpbmcpIHtcclxuICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgRmlsbENvbW1vbkRhdGEocmVxdWVzdDogRmlsdGVyUmVxdWVzdEJhc2UpOiBGaWx0ZXJSZXF1ZXN0QmFzZSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QuQ29ubmVjdGlvblN0cmluZyA9IHRoaXMuX2Nvbm5lY3Rpb25TdHJpbmc7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGFzeW5jIEdldE1ldGFkYXRhKHJlcXVlc3Q6IE1ldGFkYXRhUmVxdWVzdCk6IFByb21pc2U8TWV0YWRhdGFSZXNwb25zZT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Qb3N0RGF0YTxNZXRhZGF0YVJlc3BvbnNlPih7IHVybDogXCJhcGkvRmlsdGVyQ29udHJvbC9HZXRNZXRhZGF0YVwiLCBkYXRhOiB0aGlzLkZpbGxDb21tb25EYXRhKHJlcXVlc3QpIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGFzeW5jIEdldE1lbWJlcnMocmVxdWVzdDogTWVtYmVyc1JlcXVlc3QpOiBQcm9taXNlPE1lbWJlcnNSZXNwb25zZT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Qb3N0RGF0YTxNZW1iZXJzUmVzcG9uc2U+KHsgdXJsOiBcImFwaS9GaWx0ZXJDb250cm9sL0dldE1lbWJlcnNcIiwgZGF0YTogdGhpcy5GaWxsQ29tbW9uRGF0YShyZXF1ZXN0KSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBhc3luYyBHZXRMZWFmTWVtYmVycyhyZXF1ZXN0OiBMZWFmTWVtYmVyc1JlcXVlc3QpOiBQcm9taXNlPE1lbWJlcnNSZXNwb25zZT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Qb3N0RGF0YTxNZW1iZXJzUmVzcG9uc2U+KHsgdXJsOiBcImFwaS9GaWx0ZXJDb250cm9sL0dldExlYWZNZW1iZXJzXCIsIGRhdGE6IHRoaXMuRmlsbENvbW1vbkRhdGEocmVxdWVzdCkgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBHZXRDaGlsZHJlbihyZXF1ZXN0OiBDaGlsZHJlblJlcXVlc3QpOiBQcm9taXNlPE1lbWJlcnNSZXNwb25zZT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Qb3N0RGF0YTxNZW1iZXJzUmVzcG9uc2U+KHsgdXJsOiBcImFwaS9GaWx0ZXJDb250cm9sL0dldENoaWxkcmVuXCIsIGRhdGE6IHRoaXMuRmlsbENvbW1vbkRhdGEocmVxdWVzdCkgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBwcml2YXRlIEhhc01vcmVNZW1iZXJzKGNvdW50OiBudW1iZXIsIGxvYWRlZExhc3RMZXZlbE5vZGVzOklNZW1iZXJOb2RlW10pOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvYWRlZExhc3RMZXZlbE5vZGVzLmxlbmd0aCA9PT0gY291bnQrMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYXN5bmMgRWNobygpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5Qb3N0RGF0YSh7IHVybDogXCJhcGkvRmlsdGVyQ29udHJvbC9FY2hvXCIsIGRhdGE6IG5ldyBUZXN0UmVxdWVzdChcIkRhd2lkXCIpIH0pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVDSE9cIiwgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFBvc3REYXRhPFQ+KGFyZ3M6SUFqYXhBcmdzKSA6IFByb21pc2U8VD4ge1xyXG4gICAgICAgICAgICAvL1RPRE8gY2hhbmdlIHRvIEJJUG9pbnQgbWV0aG9kXHJcbiAgICAgICAgICAgIHZhciBhamF4U2V0dGluZ3M6IEpRdWVyeUFqYXhTZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgICAgIHVybDogXCIvXCIgKyBhcmdzLnVybCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShhcmdzLmRhdGEpLFxyXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgJC5hamF4KGFqYXhTZXR0aW5ncykuZG9uZSgocmVzdWx0KSA9PiByZXNvbHZlKHJlc3VsdCkpLmZhaWwoZXJyb3IgPT4gcmVqZWN0cyhlcnJvcikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgLy9UT0RPIHJlbW92ZVxyXG4gICAgaW50ZXJmYWNlIElBamF4QXJncyB7XHJcbiAgICAgICAgZGF0YT86IGFueTtcclxuICAgICAgICB1cmw6IHN0cmluZztcclxuICAgICAgICBkYXRhVHlwZT86IHN0cmluZztcclxuICAgIH1cclxuXHJcbn0iXX0=