var RandomTreeGeneratorModule;
(function (RandomTreeGeneratorModule) {
    class RandomTreeGenerator {
        GetRandomNodes(nodesNum) {
            return this.GenerateRandomTree({
                available: nodesNum,
                id: 0,
                levelProbDecelerator: 0.05,
                randMaxPercentage: 0.01
            }, 0, nodesNum, (makeId, confId) => {
                return {
                    text: makeId,
                    id: confId,
                    children: []
                };
            }, (node, data) => {
                node.children = data;
            });
        }
        GetNodeRecursive(data, id) {
            var result;
            data.forEach(el => {
                if (el.id === id && !result) {
                    result = el.itemsData;
                }
                else if (el.hasItems && !result) {
                    result = this.GetNodeRecursive(el.itemsData, id);
                }
            });
            return result;
        }
        GenerateRandomTree(conf, nextLevelProb, maxNumOfNodes, nodeBuilder, onRecursiveCall) {
            const nodes = [];
            const randomNumOfNodes = Math.floor(Math.random() * maxNumOfNodes * conf.randMaxPercentage) + 1;
            conf.available -= randomNumOfNodes;
            for (let i = 0; i < randomNumOfNodes; i++) {
                const newEl = nodeBuilder(this.CreateRandomCaption(), conf.id++);
                if (conf.available > 0 && Math.round(Math.random() - nextLevelProb)) {
                    onRecursiveCall(newEl, this.GenerateRandomTree(conf, nextLevelProb + conf.levelProbDecelerator, conf.available / randomNumOfNodes, nodeBuilder, onRecursiveCall));
                }
                nodes.push(newEl);
            }
            return nodes;
        }
        GenerateFlatDataCore(numberOfElements, setId = false, startId = 0) {
            var result = [];
            for (var i = 0; i < numberOfElements; i++) {
                let item = {
                    text: this.CreateRandomCaption(),
                };
                if (setId) {
                    item["id"] = startId++;
                }
                result.push(item);
            }
            return result;
        }
        CreateRandomCaption() {
            let text = "";
            const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (let i = 0; i < 10; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text;
        }
    }
    RandomTreeGeneratorModule.RandomTreeGenerator = RandomTreeGenerator;
})(RandomTreeGeneratorModule || (RandomTreeGeneratorModule = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFuZG9tVHJlZUdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJhbmRvbVRyZWVHZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBVSx5QkFBeUIsQ0E2RmxDO0FBN0ZELFdBQVUseUJBQXlCO0lBQy9CO1FBQ0ksY0FBYyxDQUFDLFFBQVE7WUFDbkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQzFCO2dCQUNJLFNBQVMsRUFBRSxRQUFRO2dCQUNuQixFQUFFLEVBQUUsQ0FBQztnQkFDTCxvQkFBb0IsRUFBRSxJQUFJO2dCQUMxQixpQkFBaUIsRUFBRSxJQUFJO2FBQzFCLEVBQ0QsQ0FBQyxFQUNELFFBQVEsRUFDUixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDZixPQUFPO29CQUNILElBQUksRUFBRSxNQUFNO29CQUNaLEVBQUUsRUFBRSxNQUFNO29CQUNWLFFBQVEsRUFBRSxFQUFFO2lCQUNmLENBQUM7WUFDTixDQUFDLEVBQ0QsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDekIsQ0FBQyxDQUNKLENBQUM7UUFDTixDQUFDO1FBRUQsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckIsSUFBSSxNQUFNLENBQUM7WUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUNkLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ3pCLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO2lCQUN6QjtxQkFBTSxJQUFJLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztpQkFDcEQ7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUM7UUFFRCxrQkFBa0IsQ0FDZCxJQUFJLEVBQ0osYUFBYSxFQUNiLGFBQWEsRUFDYixXQUFXLEVBQ1gsZUFBZTtZQUVmLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNqQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQztZQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDakUsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxhQUFhLENBQUMsRUFBRTtvQkFDakUsZUFBZSxDQUNYLEtBQUssRUFDTCxJQUFJLENBQUMsa0JBQWtCLENBQ25CLElBQUksRUFDSixhQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUN6QyxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixFQUNqQyxXQUFXLEVBQ1gsZUFBZSxDQUNsQixDQUNKLENBQUM7aUJBQ0w7Z0JBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFFRCxvQkFBb0IsQ0FBQyxnQkFBd0IsRUFBQyxRQUFjLEtBQUssRUFBQyxVQUFlLENBQUM7WUFDOUUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsSUFBSSxJQUFJLEdBQUc7b0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtpQkFDbkMsQ0FBQztnQkFDRixJQUFJLEtBQUssRUFBRTtvQkFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7aUJBQzFCO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDckI7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUVsQixDQUFDO1FBRU0sbUJBQW1CO1lBQ3RCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sUUFBUSxHQUFHLGdFQUFnRSxDQUFDO1lBRWxGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QixJQUFJLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUV6RSxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0tBR0o7SUEzRlksNkNBQW1CLHNCQTJGL0IsQ0FBQTtBQUNMLENBQUMsRUE3RlMseUJBQXlCLEtBQXpCLHlCQUF5QixRQTZGbEMiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgUmFuZG9tVHJlZUdlbmVyYXRvck1vZHVsZSB7XG4gICAgZXhwb3J0IGNsYXNzIFJhbmRvbVRyZWVHZW5lcmF0b3Ige1xuICAgICAgICBHZXRSYW5kb21Ob2Rlcyhub2Rlc051bSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVSYW5kb21UcmVlKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlOiBub2Rlc051bSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxldmVsUHJvYkRlY2VsZXJhdG9yOiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICByYW5kTWF4UGVyY2VudGFnZTogMC4wMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICBub2Rlc051bSxcbiAgICAgICAgICAgICAgICAobWFrZUlkLCBjb25mSWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1ha2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBjb25mSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChub2RlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4gPSBkYXRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBHZXROb2RlUmVjdXJzaXZlKGRhdGEsIGlkKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuaWQgPT09IGlkICYmICFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZWwuaXRlbXNEYXRhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuaGFzSXRlbXMgJiYgIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLkdldE5vZGVSZWN1cnNpdmUoZWwuaXRlbXNEYXRhLCBpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgR2VuZXJhdGVSYW5kb21UcmVlKFxuICAgICAgICAgICAgY29uZixcbiAgICAgICAgICAgIG5leHRMZXZlbFByb2IsXG4gICAgICAgICAgICBtYXhOdW1PZk5vZGVzLFxuICAgICAgICAgICAgbm9kZUJ1aWxkZXIsXG4gICAgICAgICAgICBvblJlY3Vyc2l2ZUNhbGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmFuZG9tTnVtT2ZOb2RlcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heE51bU9mTm9kZXMgKiBjb25mLnJhbmRNYXhQZXJjZW50YWdlKSArIDE7XG4gICAgICAgICAgICBjb25mLmF2YWlsYWJsZSAtPSByYW5kb21OdW1PZk5vZGVzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5kb21OdW1PZk5vZGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbCA9IG5vZGVCdWlsZGVyKHRoaXMuQ3JlYXRlUmFuZG9tQ2FwdGlvbigpLCBjb25mLmlkKyspO1xuICAgICAgICAgICAgICAgIGlmIChjb25mLmF2YWlsYWJsZSA+IDAgJiYgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpIC0gbmV4dExldmVsUHJvYikpIHtcbiAgICAgICAgICAgICAgICAgICAgb25SZWN1cnNpdmVDYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkdlbmVyYXRlUmFuZG9tVHJlZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25mLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRMZXZlbFByb2IgKyBjb25mLmxldmVsUHJvYkRlY2VsZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmYuYXZhaWxhYmxlIC8gcmFuZG9tTnVtT2ZOb2RlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlQnVpbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJlY3Vyc2l2ZUNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaChuZXdFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICAgIH1cblxuICAgICAgICBHZW5lcmF0ZUZsYXREYXRhQ29yZShudW1iZXJPZkVsZW1lbnRzOiBudW1iZXIsc2V0SWQ6Ym9vbGVhbj1mYWxzZSxzdGFydElkOm51bWJlcj0wLCk6IE9iamVjdFtdIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZFbGVtZW50czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuQ3JlYXRlUmFuZG9tQ2FwdGlvbigpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHNldElkKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bXCJpZFwiXSA9IHN0YXJ0SWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgQ3JlYXRlUmFuZG9tQ2FwdGlvbigpIHtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspXG4gICAgICAgICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICB9XG5cblxuICAgIH1cbn0iXX0=