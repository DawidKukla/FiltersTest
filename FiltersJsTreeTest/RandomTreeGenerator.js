var RandomTreeGeneratorModule;
(function (RandomTreeGeneratorModule) {
    class RandomTreeGenerator {
        GetRandomNodes(nodesNum) {
            return this.GenerateRandomTree({
                available: nodesNum,
                id: 0,
                levelProbDecelerator: 0.05,
                randMaxPercentage: 0.01
            }, 0, nodesNum, (makeId, confId) => {
                return {
                    text: makeId,
                    id: confId,
                    children: []
                };
            }, (node, data) => {
                node.children = data;
            });
        }
        GetNodeRecursive(data, id) {
            var result;
            data.forEach(el => {
                if (el.id === id && !result) {
                    result = el.itemsData;
                }
                else if (el.hasItems && !result) {
                    result = this.GetNodeRecursive(el.itemsData, id);
                }
            });
            return result;
        }
        GenerateRandomTree(conf, nextLevelProb, maxNumOfNodes, nodeBuilder, onRecursiveCall) {
            const nodes = [];
            const randomNumOfNodes = Math.floor(Math.random() * maxNumOfNodes * conf.randMaxPercentage) + 1;
            conf.available -= randomNumOfNodes;
            for (let i = 0; i < randomNumOfNodes; i++) {
                const newEl = nodeBuilder(this.CreateRandomCaption(), conf.id++);
                if (conf.available > 0 && Math.round(Math.random() - nextLevelProb)) {
                    onRecursiveCall(newEl, this.GenerateRandomTree(conf, nextLevelProb + conf.levelProbDecelerator, conf.available / randomNumOfNodes, nodeBuilder, onRecursiveCall));
                }
                nodes.push(newEl);
            }
            return nodes;
        }
        GenerateFlatDataCore(numberOfElements, setId = false, startId = 0) {
            var result = [];
            for (var i = 0; i < numberOfElements; i++) {
                let item = {
                    text: this.CreateRandomCaption(),
                };
                if (setId) {
                    item["id"] = startId++;
                }
                result.push(item);
            }
            return result;
        }
        CreateRandomCaption() {
            let text = "";
            const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (let i = 0; i < 10; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            return text;
        }
    }
    RandomTreeGeneratorModule.RandomTreeGenerator = RandomTreeGenerator;
})(RandomTreeGeneratorModule || (RandomTreeGeneratorModule = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFuZG9tVHJlZUdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlJhbmRvbVRyZWVHZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBVSx5QkFBeUIsQ0E2RmxDO0FBN0ZELFdBQVUseUJBQXlCO0lBQy9CO1FBQ0ksY0FBYyxDQUFDLFFBQVE7WUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FDMUI7Z0JBQ0ksU0FBUyxFQUFFLFFBQVE7Z0JBQ25CLEVBQUUsRUFBRSxDQUFDO2dCQUNMLG9CQUFvQixFQUFFLElBQUk7Z0JBQzFCLGlCQUFpQixFQUFFLElBQUk7YUFDMUIsRUFDRCxDQUFDLEVBQ0QsUUFBUSxFQUNSLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNmLE1BQU0sQ0FBQztvQkFDSCxJQUFJLEVBQUUsTUFBTTtvQkFDWixFQUFFLEVBQUUsTUFBTTtvQkFDVixRQUFRLEVBQUUsRUFBRTtpQkFDZixDQUFDO1lBQ04sQ0FBQyxFQUNELENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLENBQUMsQ0FDSixDQUFDO1FBQ04sQ0FBQztRQUVELGdCQUFnQixDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JCLElBQUksTUFBTSxDQUFDO1lBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDZCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQzFCLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO2dCQUMxQixDQUFDO2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDaEMsTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xCLENBQUM7UUFFRCxrQkFBa0IsQ0FDZCxJQUFJLEVBQ0osYUFBYSxFQUNiLGFBQWEsRUFDYixXQUFXLEVBQ1gsZUFBZTtZQUVmLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNqQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEcsSUFBSSxDQUFDLFNBQVMsSUFBSSxnQkFBZ0IsQ0FBQztZQUNuQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3hDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDakUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsRSxlQUFlLENBQ1gsS0FBSyxFQUNMLElBQUksQ0FBQyxrQkFBa0IsQ0FDbkIsSUFBSSxFQUNKLGFBQWEsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQ3pDLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLEVBQ2pDLFdBQVcsRUFDWCxlQUFlLENBQ2xCLENBQ0osQ0FBQztnQkFDTixDQUFDO2dCQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEIsQ0FBQztZQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUVELG9CQUFvQixDQUFDLGdCQUF3QixFQUFDLFFBQWMsS0FBSyxFQUFDLFVBQWUsQ0FBQztZQUM5RSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDaEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUN4QyxJQUFJLElBQUksR0FBRztvQkFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFO2lCQUNuQyxDQUFDO2dCQUNGLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDO2dCQUMzQixDQUFDO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsQ0FBQztZQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFbEIsQ0FBQztRQUVNLG1CQUFtQjtZQUN0QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7WUFDZCxNQUFNLFFBQVEsR0FBRyxnRUFBZ0UsQ0FBQztZQUVsRixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZCLElBQUksSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRXpFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUdKO0lBM0ZZLDZDQUFtQixzQkEyRi9CLENBQUE7QUFDTCxDQUFDLEVBN0ZTLHlCQUF5QixLQUF6Qix5QkFBeUIsUUE2RmxDIiwic291cmNlc0NvbnRlbnQiOlsibmFtZXNwYWNlIFJhbmRvbVRyZWVHZW5lcmF0b3JNb2R1bGUge1xyXG4gICAgZXhwb3J0IGNsYXNzIFJhbmRvbVRyZWVHZW5lcmF0b3Ige1xyXG4gICAgICAgIEdldFJhbmRvbU5vZGVzKG5vZGVzTnVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkdlbmVyYXRlUmFuZG9tVHJlZShcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGU6IG5vZGVzTnVtLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsUHJvYkRlY2VsZXJhdG9yOiAwLjA1LFxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmRNYXhQZXJjZW50YWdlOiAwLjAxXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIG5vZGVzTnVtLFxyXG4gICAgICAgICAgICAgICAgKG1ha2VJZCwgY29uZklkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbWFrZUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogY29uZklkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW11cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIChub2RlLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbiA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBHZXROb2RlUmVjdXJzaXZlKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuaWQgPT09IGlkICYmICFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBlbC5pdGVtc0RhdGE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsLmhhc0l0ZW1zICYmICFyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLkdldE5vZGVSZWN1cnNpdmUoZWwuaXRlbXNEYXRhLCBpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgR2VuZXJhdGVSYW5kb21UcmVlKFxyXG4gICAgICAgICAgICBjb25mLFxyXG4gICAgICAgICAgICBuZXh0TGV2ZWxQcm9iLFxyXG4gICAgICAgICAgICBtYXhOdW1PZk5vZGVzLFxyXG4gICAgICAgICAgICBub2RlQnVpbGRlcixcclxuICAgICAgICAgICAgb25SZWN1cnNpdmVDYWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbU51bU9mTm9kZXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXhOdW1PZk5vZGVzICogY29uZi5yYW5kTWF4UGVyY2VudGFnZSkgKyAxO1xyXG4gICAgICAgICAgICBjb25mLmF2YWlsYWJsZSAtPSByYW5kb21OdW1PZk5vZGVzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmRvbU51bU9mTm9kZXM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RWwgPSBub2RlQnVpbGRlcih0aGlzLkNyZWF0ZVJhbmRvbUNhcHRpb24oKSwgY29uZi5pZCsrKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb25mLmF2YWlsYWJsZSA+IDAgJiYgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpIC0gbmV4dExldmVsUHJvYikpIHtcclxuICAgICAgICAgICAgICAgICAgICBvblJlY3Vyc2l2ZUNhbGwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkdlbmVyYXRlUmFuZG9tVHJlZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TGV2ZWxQcm9iICsgY29uZi5sZXZlbFByb2JEZWNlbGVyYXRvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmYuYXZhaWxhYmxlIC8gcmFuZG9tTnVtT2ZOb2RlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVCdWlsZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZWN1cnNpdmVDYWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaChuZXdFbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgR2VuZXJhdGVGbGF0RGF0YUNvcmUobnVtYmVyT2ZFbGVtZW50czogbnVtYmVyLHNldElkOmJvb2xlYW49ZmFsc2Usc3RhcnRJZDpudW1iZXI9MCwpOiBPYmplY3RbXSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkVsZW1lbnRzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuQ3JlYXRlUmFuZG9tQ2FwdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmIChzZXRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bXCJpZFwiXSA9IHN0YXJ0SWQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIENyZWF0ZVJhbmRvbUNhcHRpb24oKSB7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgY29uc3QgcG9zc2libGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspXHJcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG59Il19