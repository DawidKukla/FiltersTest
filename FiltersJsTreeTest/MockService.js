var TestTree;
(function (TestTree) {
    var MockServiceModule;
    (function (MockServiceModule) {
        var TestNodeHelper = TestTree.Common.MemberNodesHelper;
        var MemberFilterType = TestTree.Common.MemberFilterType;
        var MetadataResponse = TestTree.Common.MetadataResponse;
        var FilterMetadata = TestTree.Common.FilterMetadata;
        var FilterLevel = TestTree.Common.FilterLevel;
        class MockService {
            constructor(_testTree, _connectionString, _hierarchyUniqueName) {
                this._testTree = _testTree;
                this._connectionString = _connectionString;
                this._hierarchyUniqueName = _hierarchyUniqueName;
                this._totalElementsCount = 0;
                this._testSortedLevels = [new FilterLevel("Year", "Year"), new FilterLevel("Quater", "Quater"), new FilterLevel("Month", "Month"), new FilterLevel("Day", "Day")];
                this.CreateIds(_testTree);
                this.AddParentUniqueNames_Levels_ChildCount_AndCalculateTotalElementsCount(_testTree);
            }
            GetLevelNumberFromUniqueName(uniqueName) {
                return this._testSortedLevels.map(x => x.UniqueName).indexOf(uniqueName);
            }
            async GetMetadata(request) {
                var metadata = new FilterMetadata(request.FieldUniqueName, "Calendar Time", this._testSortedLevels, this._testTree.length, this._totalElementsCount);
                return new MetadataResponse(metadata, []);
            }
            async GetMembers(request) {
                var result = this.GetMembersCore(this.GetLevelNumberFromUniqueName(request.FieldUniqueName), request.Start, request.Count, request.Filter, false);
                return { FilterInfo: result };
            }
            async GetLeafMembers(request) {
                var result = this.GetMembersCore(this.GetLevelNumberFromUniqueName(request.FieldUniqueName), request.Start, request.Count, request.Filter, true);
                return { FilterInfo: result };
            }
            async GetChildren(request) {
                var result = null;
                var temp = this.GetCopyOfWorkingTree();
                Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(temp, (x) => x.children, (x) => {
                    if (x.id === request.Parent) {
                        result = x;
                        return false;
                    }
                    return true;
                });
                result = this.SelectSpecyficElements(this.MakeLazyLoaded(result.children), request.Start, request.Count + 1);
                var hasMoreNodes = this.HasMoreMembers(request.Count, result);
                if (hasMoreNodes) {
                    result.pop();
                }
                result = this.ClearNotNeededData(result, {}, hasMoreNodes);
                return { FilterInfo: result };
            }
            GetCopyOfWorkingTree() {
                return this.GetCopyOfTree(this._testTree);
            }
            GetCopyOfTree(tree) {
                return JSON.parse(JSON.stringify(tree));
            }
            MakeLazyLoaded(nodes) {
                nodes.forEach(node => {
                    if (node.children.length) {
                        node.children = true;
                        delete node.state;
                    }
                });
                return nodes;
            }
            SelectSpecyficElements(nodes, startIndex, numberOfElements) {
                var result = [];
                for (var i = startIndex; i < nodes.length && result.length <= numberOfElements - 1; i++) {
                    result.push(nodes[i]);
                }
                return result;
            }
            GetMembersCore(targetLevelNumber, start, count, filter, onlyLeafs = false) {
                var temp = this.GetCopyOfWorkingTree();
                temp = this.SearchMembersCore(temp, targetLevelNumber, filter);
                var allParentsLookup = {};
                var targetLevelElementsList = [];
                var targetParentsLookup = {};
                Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(temp, (x) => x.children, (x, parent, level, index) => {
                    if (onlyLeafs) {
                        if (x.data && x.data.childrenTotalCount === 0) {
                            targetLevelElementsList.push(x);
                        }
                    }
                    else if (x.data && x.data.level === targetLevelNumber) {
                        if (x.children.length) {
                            x.children = true;
                        }
                        targetLevelElementsList.push(x);
                    }
                    if (parent) {
                        allParentsLookup[parent.id] = parent;
                    }
                    return true;
                }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory());
                for (let key in allParentsLookup) {
                    if (allParentsLookup.hasOwnProperty(key)) {
                        allParentsLookup[key].children.length = 0;
                    }
                }
                temp = this.SelectSpecyficElements(targetLevelElementsList, start, count + 1);
                var hasMoreMembers = this.HasMoreMembers(count, temp);
                if (hasMoreMembers) {
                    temp.pop();
                }
                temp.forEach(x => {
                    TestNodeHelper.GetAllParentsNames(allParentsLookup, x).forEach(parentName => {
                        targetParentsLookup[parentName] = true;
                    });
                });
                for (let key in allParentsLookup) {
                    if (!targetParentsLookup[key]) {
                        delete allParentsLookup[key];
                    }
                }
                return this.ClearNotNeededData(temp, allParentsLookup, hasMoreMembers);
            }
            ClearNotNeededData(lastLevelNodes, allParentsLookup, hasMoreMembers) {
                lastLevelNodes.forEach(x => delete x.data.level);
                for (var parentKey in allParentsLookup) {
                    delete allParentsLookup[parentKey].data.level;
                }
                return { LastLevelNodes: lastLevelNodes, ParentsLookup: allParentsLookup, HasMoreMembers: hasMoreMembers };
            }
            SearchMembersCore(input, targetLevelNumber, filter) {
                if (!filter)
                    return input;
                var result = input;
                var matchFounded = false;
                var matchCounter = 0;
                Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                    if (level === targetLevelNumber) {
                        switch (filter.Type) {
                            case MemberFilterType.Contains:
                                matchFounded = x.text.toLowerCase().indexOf(filter.Value.toLowerCase()) !== -1;
                                break;
                            case MemberFilterType.BeginsWith:
                                matchFounded = x.text.toLowerCase().startsWith(filter.Value.toLowerCase());
                                break;
                            case MemberFilterType.EndsWith:
                                matchFounded = x.text.toLowerCase().endsWith(filter.Value.toLowerCase());
                                break;
                        }
                        if (!matchFounded) {
                            if (parent) {
                                parent.children.splice(index, 1);
                            }
                            else {
                                result.splice(index, 1);
                            }
                        }
                        else {
                            matchCounter++;
                        }
                    }
                    return true;
                });
                if (!matchCounter)
                    return [];
                Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                    if (level < targetLevelNumber && !x.children.length) {
                        if (parent) {
                            parent.children.splice(index, 1);
                            return false;
                        }
                        else {
                            result.splice(index, 1);
                            return false;
                        }
                    }
                    return true;
                });
                return result;
            }
            CreateIds(input) {
                var result = input;
                Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                    var parts = [];
                    var parentPart = "";
                    if (parent) {
                        parentPart = parent.id;
                        parts.push(parentPart);
                    }
                    parts.push(`[${x.text}]`);
                    x["id"] = parts.join(".");
                    return true;
                });
                return result;
            }
            AddParentUniqueNames_Levels_ChildCount_AndCalculateTotalElementsCount(input) {
                var result = input;
                Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                    var parentUniqueName = null;
                    if (parent) {
                        parentUniqueName = parent.id;
                    }
                    x.data = {
                        parentUniqueName: parentUniqueName,
                        level: level,
                        childrenTotalCount: x.children.length
                    };
                    this._totalElementsCount++;
                    return true;
                }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory());
                return result;
            }
            static CreateFakeTimeHierarchy(numberOfYears) {
                var result = [];
                var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                for (var y = 0; y < numberOfYears; y++) {
                    var yearItem = { text: (2000 + y).toString(), children: [] };
                    result.push(yearItem);
                    for (var q = 0; q < 4; q++) {
                        var quaterItem = { text: "Q" + (q + 1).toString(), children: [] };
                        yearItem.children.push(quaterItem);
                        for (var m = q * 3; m < q * 3 + 3; m++) {
                            var monthItem = { text: months[m], children: [] };
                            quaterItem.children.push(monthItem);
                            for (var d = 0; d < 30; d++) {
                                var dayItem = { text: (d + 1).toString(), children: [] };
                                monthItem.children.push(dayItem);
                            }
                        }
                    }
                }
                return result;
            }
            HasMoreMembers(count, loadedLastLevelNodes) {
                return loadedLastLevelNodes.length === count + 1;
            }
        }
        MockServiceModule.MockService = MockService;
    })(MockServiceModule = TestTree.MockServiceModule || (TestTree.MockServiceModule = {}));
})(TestTree || (TestTree = {}));
//# sourceMappingURL=data:application/json;base64,