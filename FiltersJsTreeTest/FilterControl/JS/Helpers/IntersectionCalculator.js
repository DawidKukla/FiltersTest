var Comarch;
(function (Comarch) {
    var Controls;
    (function (Controls) {
        var FilterControlModule;
        (function (FilterControlModule) {
            var Helpers;
            (function (Helpers) {
                var FilterType = Controls.FilterControlModule.FilterStateManagerModule.Common.FilterType;
                class IntersectionCalculatorFactory {
                    Create(a, b) { return new IntersectionCalculator(a, b); }
                }
                Helpers.IntersectionCalculatorFactory = IntersectionCalculatorFactory;
                class IntersectionPair {
                    constructor(A, B) {
                        this.A = A;
                        this.B = B;
                    }
                }
                class IntersectionCalculator {
                    constructor(a, b) {
                        this._b = b;
                        this._a = a;
                    }
                    Intersect() {
                        return this.IntersectCore(this._a, this._b);
                    }
                    IntersectCore(a, b) {
                        if (a == null)
                            return null;
                        if (b == null)
                            return null;
                        if (a.UniqueName !== b.UniqueName)
                            return null;
                        if (a.Children.length === 0)
                            return this.CloneFilterItem(b, true);
                        if (b.Children.length === 0)
                            return this.CloneFilterItem(a, true);
                        const pairs = this.IntersectChildren(a, b);
                        if (pairs.length === 0)
                            return null;
                        var children = [];
                        pairs.forEach((pair) => {
                            var child = this.IntersectCore(pair.A, pair.B);
                            if (child != null) {
                                children.push(child);
                            }
                        });
                        if (children.length === 0)
                            return null;
                        var result = this.CloneFilterItem(a, false);
                        children.forEach(child => { result.Children.push(child); });
                        return result;
                    }
                    IntersectChildren(a, b) {
                        var result;
                        var aSet = {};
                        a.Children.forEach(x => aSet[x.UniqueName] = x);
                        var bSet = {};
                        b.Children.forEach(x => bSet[x.UniqueName] = x);
                        if ((a.Type === FilterType.Included && b.Type === FilterType.Included)) {
                            result = Enumerable.from(a.Children).intersect(b.Children, x => x.UniqueName).select(x => new IntersectionPair(aSet[x.UniqueName], bSet[x.UniqueName])).toArray();
                        }
                        else if (a.Type === FilterType.Excluded && b.Type === FilterType.Excluded) {
                            result = Enumerable.from(a.Children).union(b.Children, x => x.UniqueName).select(x => new IntersectionPair(aSet[x.UniqueName], bSet[x.UniqueName])).toArray();
                        }
                        else {
                        }
                        return result;
                    }
                    CloneFilterItem(obj, deep) {
                        var clone = { UniqueName: obj.UniqueName, Type: obj.Type, Children: obj.Children };
                        if (deep) {
                            obj.Children.forEach(child => {
                                clone.Children.push(this.CloneFilterItem(child, deep));
                            });
                        }
                        return clone;
                    }
                }
                Helpers.IntersectionCalculator = IntersectionCalculator;
            })(Helpers = FilterControlModule.Helpers || (FilterControlModule.Helpers = {}));
        })(FilterControlModule = Controls.FilterControlModule || (Controls.FilterControlModule = {}));
    })(Controls = Comarch.Controls || (Comarch.Controls = {}));
})(Comarch || (Comarch = {}));
//# sourceMappingURL=data:application/json;base64,