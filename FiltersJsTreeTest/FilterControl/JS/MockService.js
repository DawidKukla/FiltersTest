var Comarch;
(function (Comarch) {
    var Controls;
    (function (Controls) {
        var FilterControlModule;
        (function (FilterControlModule) {
            var MockServiceModule;
            (function (MockServiceModule) {
                var TestNodeHelper = FilterControlModule.Common.MemberNodesHelper;
                var MemberFilterType = FilterControlModule.Common.MemberFilterType;
                var MetadataResponse = FilterControlModule.Common.MetadataResponse;
                var FilterMetadata = FilterControlModule.Common.FilterMetadata;
                var FilterLevel = FilterControlModule.Common.FilterLevel;
                var FiltredElementsChildrenCountResponse = Controls.FilterControlModule.Common.FiltredElementsChildrenCountResponse;
                var SelectionMode = Controls.FilterControlModule.FilterStateManagerModule.SelectionMode;
                var FilterItemState = Controls.FilterControlModule.Common.FilterItemState;
                class FilterControlServiceMockFactory {
                    Create(_connectionString) { return new MockService(window["_fakeTree"], window["_fakeDefaultMember"]); }
                }
                MockServiceModule.FilterControlServiceMockFactory = FilterControlServiceMockFactory;
                class MockService {
                    constructor(_testTree, _defaultMember) {
                        this._testTree = _testTree;
                        this._defaultMember = _defaultMember;
                        this._totalElementsCount = 0;
                        this._testSortedLevels = [new FilterLevel("Year", "Year"), new FilterLevel("Quater", "Quater"), new FilterLevel("Month", "Month"), new FilterLevel("Day", "Day")];
                        this._childrenTotalCountLookup = {};
                        this.AllMembersLookup = {};
                        this.CreateIds(_testTree);
                        this.AddParentUniqueNames_Levels_ChildCount_AndCalculateTotalElementsCount(_testTree, true);
                        if (this._defaultMember) {
                            this.CreateIds([_defaultMember]);
                            this.AddParentUniqueNames_Levels_ChildCount_AndCalculateTotalElementsCount([_defaultMember], false);
                        }
                    }
                    get CleanedState() {
                        return window["_fakeCleanedState"];
                    }
                    ;
                    GetLevelNumberFromUniqueName(uniqueName) {
                        return this._testSortedLevels.map(x => x.UniqueName).indexOf(uniqueName);
                    }
                    async GetMetadata(request) {
                        var defaultMemberInfo = null;
                        if (this._defaultMember) {
                            defaultMemberInfo = {
                                ParentsLookup: {},
                                LastLevelNodes: [],
                                HasMoreMembers: false
                            };
                            Comarch.Utils.TreeUtils.TreeHelpers.TraversePreorder(this._defaultMember, (x) => x.children, (current) => {
                                if (!current.children.length) {
                                    defaultMemberInfo.LastLevelNodes.push(current);
                                    return false;
                                }
                                else {
                                    defaultMemberInfo.ParentsLookup[current.id] = current;
                                }
                                current.data.childrenTotalCount = this._childrenTotalCountLookup[current.id].ChildrenCount;
                                return true;
                            });
                            this.ClearParents(defaultMemberInfo.ParentsLookup);
                        }
                        var metadata = new FilterMetadata(request.FieldUniqueName, "Calendar Time", this._testSortedLevels, this._testTree.length, this._totalElementsCount, defaultMemberInfo);
                        return new MetadataResponse(metadata, this.CleanedState);
                    }
                    async GetMembers(request) {
                        var result = this.GetMembersCore(this.GetLevelNumberFromUniqueName(request.FieldUniqueName), request.Start, request.Count, request.Filter, false);
                        return { FilterInfo: result };
                    }
                    async GetLeafMembers(request) {
                        var result = this.GetMembersCore(this.GetLevelNumberFromUniqueName(request.FieldUniqueName), request.Start, request.Count, request.Filter, true);
                        return { FilterInfo: result };
                    }
                    async GetChildren(request) {
                        var result = null;
                        var temp = this.GetCopyOfWorkingTree();
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(temp, (x) => x.children, (x) => {
                            if (x.id === request.Parent) {
                                result = x;
                                return false;
                            }
                            return true;
                        });
                        result = this.SelectSpecyficElements(this.MakeLazyLoaded(result.children), request.Start, request.Count + 1);
                        var hasMoreNodes = this.HasMoreMembers(request.Count, result);
                        if (hasMoreNodes) {
                            result.pop();
                        }
                        result = this.ClearNotNeededData(result, {}, hasMoreNodes);
                        return { FilterInfo: result };
                    }
                    async GetFiltredElementsChildrenCount(request) {
                        var result = new FiltredElementsChildrenCountResponse();
                        var temp = this.GetCopyOfWorkingTree();
                        temp = this.SearchMembersCore(temp, this.GetLevelNumberFromUniqueName(request.FieldUniqueName), request.Filter);
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(temp, (x) => x.children, (x, parent, level, index) => {
                            if (request.NodesUniqueNames.indexOf(x.id) !== -1) {
                                result.ChildrenCountInfoLookup[x.id] = { ChildrenCount: x.children.length };
                            }
                            return true;
                        }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory());
                        return result;
                    }
                    async GetMembersByStatus(request, stateManager) {
                        var temp = this.GetCopyOfWorkingTree();
                        var allParentsLookup = {};
                        var targetLevelElementsList = [];
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(temp, (x) => x.children, (current, parent, level, index, parents) => {
                            if (current.data && current.data.level === this.GetLevelNumberFromUniqueName(request.FieldUniqueName)) {
                                if (current.children.length) {
                                    current.children = true;
                                }
                                let selectionStatus = stateManager.GetSelectionStatus(parents.map(x => x.id).reverse(), current.id);
                                if (selectionStatus === SelectionMode.Selected && request.Status === FilterItemState.Checked) {
                                    targetLevelElementsList.push(current);
                                }
                                else if (selectionStatus === SelectionMode.Deselected && request.Status === FilterItemState.Unchecked) {
                                    targetLevelElementsList.push(current);
                                }
                            }
                            if (parent) {
                                allParentsLookup[parent.id] = parent;
                            }
                            return true;
                        }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory(), true);
                        return { FilterInfo: this.GetPackage(allParentsLookup, targetLevelElementsList, request.Start, request.Count) };
                    }
                    GetCopyOfWorkingTree() {
                        return this.GetCopyOfTree(this._testTree);
                    }
                    GetCopyOfTree(tree) {
                        return JSON.parse(JSON.stringify(tree));
                    }
                    MakeLazyLoaded(nodes) {
                        nodes.forEach(node => {
                            if (node.children.length) {
                                node.children = true;
                                delete node.state;
                            }
                        });
                        return nodes;
                    }
                    SelectSpecyficElements(nodes, startIndex, numberOfElements) {
                        var result = [];
                        for (var i = startIndex; i < nodes.length && result.length <= numberOfElements - 1; i++) {
                            result.push(nodes[i]);
                        }
                        return result;
                    }
                    GetMembersCore(targetLevelNumber, start, count, filter, onlyLeafs = false) {
                        var temp = this.GetCopyOfWorkingTree();
                        temp = this.SearchMembersCore(temp, targetLevelNumber, filter);
                        var allParentsLookup = {};
                        var targetLevelElementsList = [];
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(temp, (x) => x.children, (x, parent, level, index) => {
                            if (onlyLeafs) {
                                if (x.data && x.data.childrenTotalCount === 0) {
                                    targetLevelElementsList.push(x);
                                }
                            }
                            else if (x.data && x.data.level === targetLevelNumber) {
                                if (x.children.length) {
                                    x.children = true;
                                }
                                targetLevelElementsList.push(x);
                            }
                            if (parent) {
                                allParentsLookup[parent.id] = parent;
                            }
                            return true;
                        }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory());
                        return this.GetPackage(allParentsLookup, targetLevelElementsList, start, count);
                    }
                    GetPackage(allParentsLookup, targetLevelElementsList, start, count) {
                        var targetParentsLookup = {};
                        this.ClearParents(allParentsLookup);
                        var temp = this.SelectSpecyficElements(targetLevelElementsList, start, count + 1);
                        var hasMoreMembers = this.HasMoreMembers(count, temp);
                        if (hasMoreMembers) {
                            temp.pop();
                        }
                        temp.forEach(x => {
                            TestNodeHelper.GetAllParentsNames(allParentsLookup, x).forEach(parentName => {
                                targetParentsLookup[parentName] = true;
                            });
                        });
                        for (let key in allParentsLookup) {
                            if (!targetParentsLookup[key]) {
                                delete allParentsLookup[key];
                            }
                        }
                        return this.ClearNotNeededData(temp, allParentsLookup, hasMoreMembers);
                    }
                    ClearParents(allParentsLookup) {
                        for (let key in allParentsLookup) {
                            if (allParentsLookup.hasOwnProperty(key)) {
                                let memberNode = allParentsLookup[key];
                                if (memberNode && typeof memberNode.children !== "boolean") {
                                    memberNode.children.length = 0;
                                }
                            }
                        }
                    }
                    ClearNotNeededData(lastLevelNodes, allParentsLookup, hasMoreMembers) {
                        lastLevelNodes.forEach(x => delete x.data.level);
                        for (var parentKey in allParentsLookup) {
                            delete allParentsLookup[parentKey].data.level;
                        }
                        return { LastLevelNodes: lastLevelNodes, ParentsLookup: allParentsLookup, HasMoreMembers: hasMoreMembers };
                    }
                    SearchMembersCore(input, targetLevelNumber, filter) {
                        if (!filter || !filter.Value)
                            return input;
                        var result = input;
                        var matchFound = false;
                        var matchCounter = 0;
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                            if (level === targetLevelNumber) {
                                switch (filter.Type) {
                                    case MemberFilterType.Contains:
                                        matchFound = x.text.toLowerCase().indexOf(filter.Value.toLowerCase()) !== -1;
                                        break;
                                    case MemberFilterType.BeginsWith:
                                        matchFound = x.text.toLowerCase().startsWith(filter.Value.toLowerCase());
                                        break;
                                    case MemberFilterType.EndsWith:
                                        matchFound = x.text.toLowerCase().endsWith(filter.Value.toLowerCase());
                                        break;
                                }
                                if (!matchFound) {
                                    if (parent) {
                                        parent.children.splice(index, 1);
                                    }
                                    else {
                                        result.splice(index, 1);
                                    }
                                }
                                else {
                                    matchCounter++;
                                }
                            }
                            return true;
                        });
                        if (!matchCounter)
                            return [];
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                            if (level < targetLevelNumber && !x.children.length) {
                                if (parent) {
                                    parent.children.splice(index, 1);
                                    return false;
                                }
                                else {
                                    result.splice(index, 1);
                                    return false;
                                }
                            }
                            return true;
                        });
                        return result;
                    }
                    CreateIds(input) {
                        var result = input;
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                            var parts = [];
                            var parentPart = "";
                            if (parent) {
                                parentPart = parent.id;
                                parts.push(parentPart);
                            }
                            parts.push(`[${x.text}]`);
                            x["id"] = parts.join(".");
                            return true;
                        });
                        return result;
                    }
                    AddParentUniqueNames_Levels_ChildCount_AndCalculateTotalElementsCount(input, storeGlobal) {
                        var result = input;
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(result, (x) => x.children, (x, parent, level, index) => {
                            var parentUniqueName = null;
                            if (parent) {
                                parentUniqueName = parent.id;
                            }
                            x.data = {
                                parentUniqueName: parentUniqueName,
                                level: level,
                                childrenTotalCount: x.children.length
                            };
                            if (storeGlobal) {
                                this._childrenTotalCountLookup[x.id] = { ChildrenCount: x.children.length };
                                this._totalElementsCount++;
                                let copy = JSON.parse(JSON.stringify(x));
                                copy.children.length = 0;
                                this.AllMembersLookup[x.id] = copy;
                            }
                            return true;
                        }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory());
                        return result;
                    }
                    static CreateFakeTimeHierarchy(numberOfYears) {
                        var result = [];
                        var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                        for (var y = 0; y < numberOfYears; y++) {
                            var yearItem = { text: (2000 + y).toString(), children: [] };
                            result.push(yearItem);
                            for (var q = 0; q < 4; q++) {
                                var quaterItem = { text: "Q" + (q + 1).toString(), children: [] };
                                yearItem.children.push(quaterItem);
                                for (var m = q * 3; m < q * 3 + 3; m++) {
                                    var monthItem = { text: months[m], children: [] };
                                    quaterItem.children.push(monthItem);
                                    for (var d = 0; d < 30; d++) {
                                        var dayItem = { text: (d + 1).toString(), children: [] };
                                        monthItem.children.push(dayItem);
                                    }
                                }
                            }
                        }
                        return result;
                    }
                    HasMoreMembers(count, loadedLastLevelNodes) {
                        return loadedLastLevelNodes.length === count + 1;
                    }
                    GetFullData() {
                        return JSON.parse(JSON.stringify(this._testTree));
                    }
                    TestPathTracking() {
                        Comarch.Utils.TreeUtils.TreeHelpers.TraverseListPreorder(this.GetCopyOfWorkingTree(), (x) => x.children, (x, parent, level, index, path) => {
                            console.log(x.id, "(", path.map(x => x.id), ")");
                            return true;
                        }, new Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory(), true);
                    }
                }
                MockServiceModule.MockService = MockService;
            })(MockServiceModule = FilterControlModule.MockServiceModule || (FilterControlModule.MockServiceModule = {}));
        })(FilterControlModule = Controls.FilterControlModule || (Controls.FilterControlModule = {}));
    })(Controls = Comarch.Controls || (Comarch.Controls = {}));
})(Comarch || (Comarch = {}));
//# sourceMappingURL=data:application/json;base64,