var Comarch;
(function (Comarch) {
    var Controls;
    (function (Controls) {
        var FilterControlModule;
        (function (FilterControlModule) {
            var FilterStateManagerModule;
            (function (FilterStateManagerModule) {
                var TreeHelpers = Comarch.Utils.TreeUtils.TreeHelpers;
                var ForwardTreeTraversalIteratorFactory = Comarch.Utils.TreeUtils.ForwardTreeTraversalIteratorFactory;
                var AffectedNodesSet = FilterControlModule.Common.AffectedNodesSet;
                var BackwardTreeTraversalIteratorFactory = Comarch.Utils.TreeUtils.BackwardTreeTraversalIteratorFactory;
                class FilterStateManagerFactory {
                    Create(rootType, childrenTotalCount, isFiltred) {
                        return new FilterStateManager(rootType, childrenTotalCount, isFiltred);
                    }
                }
                FilterStateManagerModule.FilterStateManagerFactory = FilterStateManagerFactory;
                class FilterStateManager {
                    constructor(rootType, childrenTotalCount, _isFiltred) {
                        this._isFiltred = _isFiltred;
                        this._root = this.GetEmptyRootItem(rootType);
                        this._root.ChildrenTotalCount = childrenTotalCount;
                        this._root.AllItemsLookup = {};
                        this._root.AllItemsLookup[this._root.UniqueName] = this._root;
                    }
                    get Root() { return this._root; }
                    ;
                    get IsFiltred() { return this._isFiltred; }
                    ;
                    GetEmptyRootItem(rootType) {
                        return new ExtendedFilterItem("#", null, -1, -1, -1, this, rootType);
                    }
                    AddNodes(sortedParents, targetNode, isSelected, autoRefresh, iteratorFactory = new BackwardTreeTraversalIteratorFactory()) {
                        var affectedNodes = new AffectedNodesSet();
                        let iterator = iteratorFactory.Create(sortedParents);
                        while (iterator.MoveNext()) {
                            this.AddNode(iterator.Current, isSelected, false, affectedNodes, autoRefresh);
                        }
                        this.AddNode(targetNode, isSelected, true, affectedNodes, autoRefresh);
                        return affectedNodes;
                    }
                    AddNode(node, isSelected, isTargetNode, affectedNodesSet, autoRefresh) {
                        const existingNode = this._root.AllItemsLookup[node.UniqueName];
                        const existingParentNode = this._root.AllItemsLookup[node.ParentUniqueName];
                        if (!existingNode) {
                            if (existingParentNode) {
                                existingParentNode.AddChild(node, isSelected, isTargetNode);
                                if (isTargetNode) {
                                    node.HandleSelectionChange(isSelected, isTargetNode, affectedNodesSet, autoRefresh);
                                }
                            }
                            else {
                                throw new Error("Can not add node to not existing parent.");
                            }
                            return false;
                        }
                        else {
                            if (isTargetNode) {
                                existingNode.HandleSelectionChange(isSelected, true, affectedNodesSet, autoRefresh);
                            }
                        }
                        return true;
                    }
                    Reset(isSelect) {
                        this._root.RemoveAllChildren();
                        this._root.Type = isSelect ? Controls.FilterControlModule.FilterStateManagerModule.Common.FilterType.Excluded : Controls.FilterControlModule.FilterStateManagerModule.Common.FilterType.Included;
                        return AffectedNodesSet.Empty.Add("#");
                    }
                    GetState() { return this._root; }
                    Serialize() {
                        const result = TreeHelpers.Convert(this._root, x => x.ChildrenArray, x => x.Children, (current) => {
                            const result = { Type: current.Type, UniqueName: current.UniqueName, Children: [] };
                            return result;
                        });
                        return result;
                    }
                    Deserialize(serializedRoot, rootElementsCount, cleanedStateInfo, clean = true) {
                        var lookup = {};
                        this._root = TreeHelpers.Convert(serializedRoot, x => x.Children, x => null, (current, parent, cp, level) => {
                            var newChildrenTotalCount = -1;
                            var parentUniqueName = parent ? parent.UniqueName : null;
                            if (clean) {
                                if (parent) {
                                    let refreshedNode = cleanedStateInfo.ExistingMembersHierarchyLookup[current.UniqueName];
                                    if (refreshedNode) {
                                        newChildrenTotalCount = refreshedNode.data.childrenTotalCount;
                                    }
                                    else {
                                        return null;
                                    }
                                }
                                else {
                                    newChildrenTotalCount = rootElementsCount;
                                }
                            }
                            const result = new ExtendedFilterItem(current.UniqueName, parentUniqueName, newChildrenTotalCount, -1, level - 1, this, current.Type);
                            result.AllItemsLookup = lookup;
                            lookup[result.UniqueName] = result;
                            return result;
                        }, (parent, child) => parent.Children[child.UniqueName] = child);
                        this.Refresh();
                        console.log("DESERIALIZED STATE:");
                        this.Print();
                        return this;
                    }
                    GetSelectionStatus(sortedParents, id, iteratorFactory = new ForwardTreeTraversalIteratorFactory()) {
                        let status = null;
                        let currentParent;
                        let currentChildUniqueName = id;
                        if (!this._root.ChildrenArray.length) {
                            return this.Root.Type === Controls.FilterControlModule.FilterStateManagerModule.Common.FilterType.Excluded ? Controls.FilterControlModule.FilterStateManagerModule.Common.SelectionMode.Selected : Controls.FilterControlModule.FilterStateManagerModule.Common.SelectionMode.Deselected;
                        }
                        let iterator = iteratorFactory.Create(sortedParents);
                        while (iterator.MoveNext()) {
                            const currentParentUniqueName = iterator.Current;
                            currentParent = this._root.AllItemsLookup[currentParentUniqueName];
                            if (currentParent) {
                                status = currentParent.GetSelectionStatus(currentChildUniqueName);
                                break;
                            }
                            else {
                                currentChildUniqueName = currentParentUniqueName;
                            }
                        }
                        if (!status) {
                            status = this.GetSelectionStatus(["#"], currentChildUniqueName);
                        }
                        return status;
                    }
                    GetAllNodeSelectionStatus() {
                        return this._root.GetSelectionMode();
                    }
                    static GetLeafs(root) {
                        if (!root)
                            return [];
                        var result = [];
                        TreeHelpers.TraversePreorder(root, x => x.Children, (current) => {
                            if (!current.Children || !current.Children.length) {
                                result.push(current.UniqueName);
                            }
                            return true;
                        }, new ForwardTreeTraversalIteratorFactory());
                        return result;
                    }
                    DeepCopy(rootChildrenTotalCount) {
                        return new FilterStateManager(this.GetRootType(), rootChildrenTotalCount, this.IsFiltred).Deserialize(this.Serialize(), rootChildrenTotalCount, null, false);
                    }
                    Print() {
                        console.log("#:", this._root);
                        console.log("LOOKUP:", this._root.AllItemsLookup);
                        var text = "";
                        var writeLevelIndent = (text, level) => {
                            for (let i = 0; i < level; i++) {
                                text = text + "| ";
                            }
                            return text;
                        };
                        TreeHelpers.TraversePreorder(this._root, x => Object.keys(x.Children).map(key => x.Children[key]), (current, parent, level) => {
                            text = writeLevelIndent(text, level);
                            text += "|";
                            text += "-";
                            text += this.PrintFilterItem(current);
                            text += " [";
                            text += "L:" + current.Level + " ";
                            text += "C:" + current.ChildrenTotalCount + " ";
                            text += current.FiltredChildrenTotalCount ? "FC:" + current.FiltredChildrenTotalCount : "";
                            text += "]";
                            text += "\n";
                            return true;
                        }, new ForwardTreeTraversalIteratorFactory());
                        console.log(text);
                    }
                    PrintFilterItem(filterItem) {
                        let type = "";
                        switch (filterItem.Type) {
                            case Controls.FilterControlModule.FilterStateManagerModule.Common.FilterType.Included:
                                type = type + "(I)";
                                break;
                            case Controls.FilterControlModule.FilterStateManagerModule.Common.FilterType.Excluded:
                                type = type + "(E)";
                                break;
                            default:
                        }
                        return filterItem.UniqueName + type;
                    }
                    CreateItem(id, parentUniqueName, childrenCount, filtredChildrenTotalCount, level) {
                        return new ExtendedFilterItem(id, parentUniqueName, childrenCount, filtredChildrenTotalCount, level, this);
                    }
                    GetRootType() { return this._root.Type; }
                    UpdateFilteredChildrensTotalCount(existingElementsChildrenCountLookup, nodesWithUpdatedCount) {
                        var nodeWithUpdatedCounts = [];
                        for (var key in nodesWithUpdatedCount) {
                            if (nodesWithUpdatedCount.hasOwnProperty(key)) {
                                if (nodesWithUpdatedCount.hasOwnProperty(key)) {
                                    let item = this._root.AllItemsLookup[key];
                                    if (item) {
                                        item.FiltredChildrenTotalCount = existingElementsChildrenCountLookup[key].ChildrenCount;
                                        nodeWithUpdatedCounts.push(item.UniqueName);
                                    }
                                }
                            }
                        }
                        console.log(`%cNODE WITH UPDATED COUNTS: ${nodeWithUpdatedCounts}`, 'background: #222; color: yellow');
                    }
                    Contains(uniqueName) {
                        return Boolean(this._root.AllItemsLookup[uniqueName]);
                    }
                    CloneBranch(uniqueName, withChildren) {
                        let filterItem = this._root.AllItemsLookup[uniqueName];
                        return filterItem.Clone(withChildren);
                    }
                    IsEmpty() {
                        return this.Root.CurrentChildrenCount === 0;
                    }
                    RevertSelection() {
                        this.Root.RevertSelection();
                    }
                    Refresh() {
                        var t0 = performance.now();
                        TreeHelpers.TraversePostOrder(this.Root, x => x.ChildrenArray, (current, parent) => {
                            let selectionMode = current.GetSelectionMode();
                            if (selectionMode !== Controls.FilterControlModule.FilterStateManagerModule.Common.SelectionMode.Undetermined) {
                                var isSelect = selectionMode === Controls.FilterControlModule.FilterStateManagerModule.Common.SelectionMode.Selected;
                                current.ChangeTargetType(isSelect);
                                current.RemoveAllChildren();
                                if (parent) {
                                    current.RegisterOrUnregisterInParent(isSelect, true);
                                }
                            }
                            return true;
                        });
                        var t1 = performance.now();
                        console.info("Call to Refresh took " + (t1 - t0) + " milliseconds.");
                    }
                }
                FilterStateManagerModule.FilterStateManager = FilterStateManager;
            })(FilterStateManagerModule = FilterControlModule.FilterStateManagerModule || (FilterControlModule.FilterStateManagerModule = {}));
        })(FilterControlModule = Controls.FilterControlModule || (Controls.FilterControlModule = {}));
    })(Controls = Comarch.Controls || (Comarch.Controls = {}));
})(Comarch || (Comarch = {}));
//# sourceMappingURL=data:application/json;base64,