var TestPageModule;
(function (TestPageModule) {
    var FilterControl = Comarch.Controls.FilterControlModule.FilterControl;
    var AjaxHelper = AjaxHelperModule.AjaxHelper;
    var FilterControlControlViewFactory = Comarch.Controls.FilterControlModule.FilterControlControlViewFactory;
    var FilterStateManagerFactory = Comarch.Controls.FilterControlModule.FilterStateManagerModule.FilterStateManagerFactory;
    var FilterControlServiceMockFactory = Comarch.Controls.FilterControlModule.MockServiceModule.Service.FilterControlServiceMockFactory;
    var FilterControlServiceFactory = Comarch.Controls.FilterControlModule.FilterServiceModule.Service.FilterControlServiceFactory;
    class TestPage {
        constructor() {
            this._dataPackageSize = 2;
            this._maxTotalElementsCount = 40;
            this._currentWindow = 0;
            console.log("TestTree created.");
            this.Init();
            $("#packageSize").on("keyup change", () => {
                this._dataPackageSize = parseInt($("#packageSize").val());
                this.UpdateOptions();
            });
            $("#totalElementsCount").on("keyup change", () => {
                this._maxTotalElementsCount = parseInt($("#totalElementsCount").val());
                this.UpdateOptions();
            });
            $("#currentWindow").on("keyup change", () => {
                this._currentWindow = parseInt($("#currentWindow").val());
                this.UpdateOptions();
            });
            $("#changeConnection").click(() => this.Reload(false));
            $("#mockConnection").click(() => this.Reload(true));
            $("#loadState").click(this.OnLoadState.bind(this));
            $("#saveState").click(this.OnSaveState.bind(this));
            $("#disableLogs").click(this.OnDisableLogs.bind(this));
            $("#enableLogs").click(this.OnEnableLogs.bind(this));
        }
        get $JstreeContainer() {
            return $("#jstreeContainer");
        }
        get ConnectionString() {
            return $("#connectionStringTxt").val();
        }
        get FieldUniqueName() {
            return $("#fieldUniqueNameTxt").val();
        }
        async Init() {
            $("#packageSize").val(this._dataPackageSize);
            $("#totalElementsCount").val(this._maxTotalElementsCount);
            $("#currentWindow").val(this._currentWindow);
            this._filterControl = new FilterControl(this.GetOptions(), new FilterControlControlViewFactory(), this.GetServiceFactory(true), new FilterStateManagerFactory());
            this.Reload(true);
        }
        async Reload(mock) {
            this._isMock = mock;
            this._filterControl.ServiceFactory = this.GetServiceFactory(mock);
            this.UpdateOptions();
            await this._filterControl.Connect(this.ConnectionString, this.FieldUniqueName, this._state);
            console.log("FILTER CONTROL READY");
        }
        UpdateOptions() {
            this._filterControl.Options.Merge(this.GetOptions());
        }
        async OnLoadState() {
            const state = await AjaxHelper.GetData({ url: "api/State/Load" });
            const cleanedState = await AjaxHelper.GetData({ url: "api/State/LoadCleanedState" });
            this._state = JSON.parse(state);
            window["_fakeCleanedState"] = JSON.parse(cleanedState);
            console.log("LOADED STATE:", this._state);
            this.Reload(true);
        }
        async OnSaveState() {
            let cleanedStateInfo = {
                ExistingMembersHierarchyLookup: {}
            };
            if (this._isMock) {
                cleanedStateInfo = {
                    ExistingMembersHierarchyLookup: this._filterControl["_service"].AllMembersLookup
                };
            }
            const state = JSON.stringify(this._filterControl.GetState());
            const cleanState = JSON.stringify(cleanedStateInfo);
            await AjaxHelper.PostData({ url: "api/State/Save", data: { StateString: state, CleanedStateString: cleanState } });
            console.log("SAVED STATE:", state);
        }
        OnDisableLogs() {
            window["_orginalConsole"] = console;
            const newConsole = {};
            newConsole["log"] = function () { };
            newConsole["info"] = function () { window["_orginalConsole"].info(arguments); };
            console = newConsole;
        }
        OnEnableLogs() {
            console = window["_orginalConsole"];
        }
        GetServiceFactory(mock) {
            if (mock)
                return new FilterControlServiceMockFactory();
            return new FilterControlServiceFactory();
        }
        GetOptions() {
            return {
                $TargetContainer: $("#filterControlContainer"),
                Template: FilterControl.Template,
                Resources: FilterControl.Resources,
                DataPackageSize: this._dataPackageSize,
                MaxTotalElementsCount: this._maxTotalElementsCount,
                CurrentWindow: this._currentWindow
            };
        }
    }
    TestPageModule.TestPage = TestPage;
})(TestPageModule || (TestPageModule = {}));
var page = new TestPageModule.TestPage();
//# sourceMappingURL=data:application/json;base64,