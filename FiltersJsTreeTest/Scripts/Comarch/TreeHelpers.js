var Comarch;
(function (Comarch) {
    var Utils;
    (function (Utils) {
        var TreeUtils;
        (function (TreeUtils) {
            class TreeTraversalIteratorFactoryBase {
            }
            TreeUtils.TreeTraversalIteratorFactoryBase = TreeTraversalIteratorFactoryBase;
            class ForwardTreeTraversalIteratorFactory extends TreeTraversalIteratorFactoryBase {
                Create(list) { return new FrowardTreeTraversalIterator(list); }
            }
            TreeUtils.ForwardTreeTraversalIteratorFactory = ForwardTreeTraversalIteratorFactory;
            class BackwardTreeTraversalIteratorFactory extends TreeTraversalIteratorFactoryBase {
                Create(list) { return new BackwardTreeTraversalIterator(list); }
            }
            TreeUtils.BackwardTreeTraversalIteratorFactory = BackwardTreeTraversalIteratorFactory;
            class TreeTraversalIteratorBase {
                constructor(list) {
                    this._list = list;
                }
                get Current() { return this._list[this._currentIndex]; }
                get CurrentIndex() { return this._currentIndex; }
            }
            TreeUtils.TreeTraversalIteratorBase = TreeTraversalIteratorBase;
            class FrowardTreeTraversalIterator extends TreeTraversalIteratorBase {
                constructor(list) {
                    super(list);
                    this._currentIndex = -1;
                }
                MoveNext() {
                    this._currentIndex++;
                    return this._currentIndex < this._list.length;
                }
            }
            TreeUtils.FrowardTreeTraversalIterator = FrowardTreeTraversalIterator;
            class BackwardTreeTraversalIterator extends TreeTraversalIteratorBase {
                constructor(list) {
                    super(list);
                    this._currentIndex = list.length;
                }
                MoveNext() {
                    this._currentIndex--;
                    return this._currentIndex >= 0;
                }
            }
            TreeUtils.BackwardTreeTraversalIterator = BackwardTreeTraversalIterator;
            class TreeHelpers {
                static TraverseListPreorder(list, childrenSelector, operation, iteratorFactory = new BackwardTreeTraversalIteratorFactory(), trackPath = false) {
                    var iterator = iteratorFactory.Create(list);
                    while (iterator.MoveNext()) {
                        TreeHelpers.TraversePreorder(iterator.Current, childrenSelector, operation, iteratorFactory, null, 0, iterator.CurrentIndex, trackPath, []);
                    }
                }
                static TraversePreorder(currentItem, childrenSelector, operation, iteratorFactory = new BackwardTreeTraversalIteratorFactory(), parent = null, level = 0, index = 0, trackPath = false, path = []) {
                    const canContinue = operation(currentItem, parent, level, index, path);
                    if (!canContinue)
                        return false;
                    if (trackPath) {
                        path.push(currentItem);
                    }
                    const children = childrenSelector(currentItem);
                    if (children) {
                        var iterator = iteratorFactory.Create(children);
                        while (iterator.MoveNext()) {
                            var nextLevel = level + 1;
                            TreeHelpers.TraversePreorder(iterator.Current, childrenSelector, operation, iteratorFactory, currentItem, nextLevel, iterator.CurrentIndex, trackPath, path.slice(0));
                        }
                    }
                    return true;
                }
                static TraverseListPostOrder(list, childrenSelector, operation, iteratorFactory = new BackwardTreeTraversalIteratorFactory(), canContinueProcessing = () => true) {
                    var iterator = iteratorFactory.Create(list);
                    while (iterator.MoveNext()) {
                        TreeHelpers.TraversePostOrder(iterator.Current, childrenSelector, operation, iteratorFactory, canContinueProcessing, null, 0, iterator.CurrentIndex);
                    }
                }
                static TraversePostOrder(currentItem, childrenSelector, operation, iteratorFactory = new BackwardTreeTraversalIteratorFactory(), canContinueProcessing = () => true, parent = null, level = 0, index = 0) {
                    const canContinue = canContinueProcessing(currentItem, parent, level, index);
                    if (!canContinue)
                        return false;
                    const children = childrenSelector(currentItem);
                    if (children) {
                        var iterator = iteratorFactory.Create(children);
                        while (iterator.MoveNext()) {
                            var nextLevel = level + 1;
                            TreeHelpers
                                .TraversePostOrder(iterator.Current, childrenSelector, operation, iteratorFactory, canContinueProcessing, currentItem, nextLevel, iterator.CurrentIndex);
                        }
                    }
                    operation(currentItem, parent, level, index);
                    return true;
                }
                static Convert(currentItem, childrenSelector, resultChildrenSelector, convertOperation, addChildrenOperation = null, parent = null, convertedParent = null, level = 0, index = 0) {
                    const convertedCurrentItem = convertOperation(currentItem, parent, convertedParent, level, index);
                    if (!convertedCurrentItem)
                        return null;
                    const children = childrenSelector(currentItem);
                    if (children) {
                        for (let i = 0; i < children.length; i++) {
                            const chi = children[i];
                            const nextLevel = level + 1;
                            const childConverted = TreeHelpers
                                .Convert(chi, childrenSelector, resultChildrenSelector, convertOperation, addChildrenOperation, currentItem, convertedCurrentItem, nextLevel, i);
                            if (childConverted) {
                                if (addChildrenOperation) {
                                    addChildrenOperation(convertedCurrentItem, childConverted);
                                }
                                else {
                                    resultChildrenSelector(convertedCurrentItem).push(childConverted);
                                }
                            }
                        }
                    }
                    return convertedCurrentItem;
                }
                static ConvertListToLookup(list, childrenSelector, keySelector) {
                    var result = new collections.Dictionary();
                    list.forEach(x => {
                        this.ConvertToLookup(x, childrenSelector, keySelector, result);
                    });
                    return result;
                }
                static ConvertToLookup(root, childrenSelector, keySelector, result = new collections.Dictionary()) {
                    TreeHelpers.TraversePreorder(root, childrenSelector, (x) => {
                        result.setValue(keySelector(x), x);
                        return true;
                    });
                    return result;
                }
                static GetByPredicate(input, childrenSelector, predicate, deepCopyFunction) {
                    var result = [];
                    TreeHelpers.TraversePreorder(input, childrenSelector, (x) => {
                        if (predicate(x)) {
                            result.push(deepCopyFunction(x));
                        }
                        return true;
                    });
                    return result;
                }
                static ReconstructFromLeafs(leafsList, fullHierarchyLookup, itemUniqueNameSelector, itemParentUniqueNameSelector, childrenSelector, deepCopyFunction) {
                    var lookup = new collections.Dictionary();
                    leafsList.forEach(x => {
                        var currentItem = null;
                        var uniqueName = itemUniqueNameSelector(x);
                        currentItem = fullHierarchyLookup.getValue(uniqueName);
                        if (currentItem) {
                            currentItem = deepCopyFunction(currentItem, false);
                            lookup.setValue(uniqueName, currentItem);
                            var parentUniqueName = itemParentUniqueNameSelector(currentItem);
                            currentItem = fullHierarchyLookup.getValue(parentUniqueName);
                            while (currentItem) {
                                currentItem = deepCopyFunction(currentItem, false);
                                lookup.setValue(parentUniqueName, currentItem);
                                var parentUniqueName = itemParentUniqueNameSelector(currentItem);
                                currentItem = fullHierarchyLookup.getValue(parentUniqueName);
                            }
                        }
                    });
                    lookup.forEach((key, value) => {
                        var parent = lookup.getValue(itemParentUniqueNameSelector(value));
                        if (parent) {
                            childrenSelector(parent).push(value);
                        }
                    });
                    return lookup.getValue(TreeHelpers.HIERARCHY_ROOT_UNIQUE_NAME);
                }
                static Union(rootA, rootB, itemUniqueNameSelector, childrenSelector, parentPropertyName, deepCopyFunction) {
                    const rootUniqueName = itemUniqueNameSelector(rootA);
                    var lookup = new collections.Dictionary();
                    var lookupFillFunction = (i, parent, level, index) => {
                        if (parent) {
                            i[parentPropertyName] = itemUniqueNameSelector(parent);
                        }
                        lookup.setValue(itemUniqueNameSelector(i), deepCopyFunction(i, false));
                        return true;
                    };
                    TreeHelpers.TraversePreorder(rootA, childrenSelector, (i, parent, level, index) => {
                        return lookupFillFunction(i, parent, level, index);
                    });
                    TreeHelpers.TraversePreorder(rootB, childrenSelector, (i, parent, level, index) => {
                        return lookupFillFunction(i, parent, level, index);
                    });
                    lookup.forEach((key, value) => {
                        var parentUniqueName = value[parentPropertyName];
                        if (parentUniqueName) {
                            const parent = lookup.getValue(parentUniqueName);
                            if (parent) {
                                childrenSelector(parent).push(value);
                            }
                        }
                    });
                    return lookup.getValue(rootUniqueName);
                }
                static IntersectChildren(a, b, uniqueNameSelector) {
                    var result = [];
                    var aSet = new collections.Dictionary();
                    a.forEach(x => aSet.setValue(uniqueNameSelector(x), x));
                    var bSet = new collections.Dictionary();
                    b.forEach(x => bSet.setValue(uniqueNameSelector(x), x));
                    aSet.keys().forEach((key) => {
                        var value = bSet.getValue(key);
                        if (value) {
                            result.push(new IntersectionPair(aSet.getValue(key), value));
                        }
                    });
                    return result;
                }
                static Intersection(a, b, uniqueNameSelector, childrenSelector, childrenAppender, deepCopy) {
                    if (a == null)
                        return null;
                    if (b == null)
                        return null;
                    if (uniqueNameSelector(a) !== uniqueNameSelector(b))
                        return null;
                    if (childrenSelector(a).length === 0)
                        return deepCopy(b, true);
                    if (childrenSelector(b).length === 0)
                        return deepCopy(a, true);
                    const pairs = TreeHelpers.IntersectChildren(childrenSelector(a), childrenSelector(b), uniqueNameSelector);
                    if (pairs.length === 0)
                        return null;
                    var children = [];
                    pairs.forEach((pair) => {
                        var child = TreeHelpers.Intersection(pair.A, pair.B, uniqueNameSelector, childrenSelector, childrenAppender, deepCopy);
                        if (child != null) {
                            children.push(child);
                        }
                    });
                    if (children.length === 0)
                        return null;
                    var result = deepCopy(a, false);
                    children.forEach(child => { childrenAppender(result, child); });
                    return result;
                }
                static Flatten(root, childrenSelector, includePredicate = (x) => { return true; }) {
                    return TreeHelpers.FlattenInternal([], childrenSelector(root), childrenSelector, includePredicate);
                }
                static FlattenArray(rootList, childrenSelector, includePredicate = (x) => { return true; }) {
                    return TreeHelpers.FlattenInternal([], rootList, childrenSelector, includePredicate);
                }
                static FlattenInternal(result, list, childrenSelector, includePredicate = (x) => { return true; }) {
                    var stack = new collections.Stack();
                    list.forEach(i => { stack.push(i); });
                    while (!stack.isEmpty()) {
                        const current = stack.pop();
                        if (includePredicate(current))
                            result.push(current);
                        const children = childrenSelector(current);
                        if (children) {
                            children.forEach(i => { stack.push(i); });
                        }
                    }
                    return result;
                }
                static TraverseListBFS(list, childrenSelector, operation, trackVisited = false) {
                    TreeHelpers.TraverseBFS(null, childrenSelector, operation, list.slice());
                }
                static TraverseBFS(currentItem, childrenSelector, operation, queue) {
                    var iterationIndex = 0;
                    if (currentItem)
                        queue.push(currentItem);
                    var canContinue = true;
                    while (queue.length > 0 && canContinue) {
                        var current = queue.shift();
                        childrenSelector(current).forEach(c => queue.push(c));
                        canContinue = operation(current, iterationIndex);
                        iterationIndex++;
                    }
                }
            }
            TreeHelpers.HIERARCHY_ROOT_UNIQUE_NAME = "HierarchyRoot_297473E5-182B-43E5-BBD0-C7A994992778";
            TreeUtils.TreeHelpers = TreeHelpers;
            class IntersectionPair {
                constructor(A, B) {
                    this.A = A;
                    this.B = B;
                }
            }
            TreeUtils.IntersectionPair = IntersectionPair;
        })(TreeUtils = Utils.TreeUtils || (Utils.TreeUtils = {}));
    })(Utils = Comarch.Utils || (Comarch.Utils = {}));
})(Comarch || (Comarch = {}));
//# sourceMappingURL=data:application/json;base64,